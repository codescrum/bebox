require 'capistrano/ext/multistage'

set :application, "<%= project.name %>"
set :stages, Dir[".checkpoints/*/*"].map{|f| File.basename(f)}
set :default_stage, 'vagrant'
set :use_sudo, false
set :keep_releases, 3
set :deploy_via, :remote_cache
default_run_options[:pty] = true
default_run_options[:shell] = '/bin/bash --login'
set :normalize_asset_timestamps, false
set(:facter_variables) { {deploy_environment: stage, deploy_user: user, deploy_to: deploy_to} }

before 'puppet:apply', 'puppet:config_hiera'

# evaluate if a file exists in a remote server, if this command is executed by a task that is executed for multiple
# servers, then this command doesn't work due isn't designed to run in parallel on multiple servers, also This command
# behaves identically to the "invoke_command" command. for this reason is necesary the yield, if yield is not used,
# then, the process would be inconsistent.
def remote_file_exists?(path)
  run("if [ -e '#{path}' ]; then echo -n 'true'; else echo -n 'false'; fi") do |ch, stream, out|
    yield ch, stream, out
  end
end

# When using puppet apply for example, pass additional facts to Facter
# @returns an environment variable string like FACTER_custom
def custom_facter_variables
  facter_variables.map{|facter_key, facter_value| "FACTER_#{facter_key}=#{facter_value}"}.join(' ')
end

namespace :deploy do

	desc 'Installs tools and required dependencies in the remote machine'
	namespace :prepare_installation do

	  desc 'Install dependencies and command line tools to operate correctly'
	  task :common do
	    ubuntu.setup
	    dependencies
	  end

    desc 'Install puppet on the remote machine (free-standalone) [including dependencies]'
    task :puppet do
      run "#{sudo} apt-get --yes --fix-broken install"
      run "cd #{current_path}/lib/deb/puppet_3.6.0 && #{sudo} dpkg -i *.deb"
    end

	  desc 'Install libraries'
	  task :dependencies do
	    run "#{sudo} aptitude update"
	    run "cd #{current_path}/prepare/dependencies/ubuntu && cat packages|xargs #{sudo} aptitude -y install"
	  end
	end
  namespace :ubuntu do
    desc 'Install dependencies and command line tools to opperate correctly'
    task :setup do
      install_aptitude
      set_fqdn
    end

    desc 'Install aptitude'
    task :install_aptitude do
      run "#{sudo} apt-get update"
      run "#{sudo} apt-get -y install aptitude"
      # run "#{sudo} aptitude -y full-upgrade"
    end

    desc "Sets the boxes' fully qualified domain name (fqdn), through the 'hostname' command"
    task :set_fqdn do
      run('hostname') do |ch, stream, out|
        if ch[:server].host.strip == out.strip
          puts "The #{ch[:server]} server hostname is configured properly"
        else
          run "#{sudo} hostname #{ch[:server].host}", hosts: ch[:server]
        end
      end
    end
  end
end

namespace :puppet do

  desc 'Bundle modules listed in the Puppetfile through librarian-puppet'
  task :bundle_modules do
    run "cd #{current_path}/steps/#{phase} && ~/.rbenv/shims/librarian-puppet install"
  end

  desc 'Applies puppet using the current path puppet repo uploaded through capistrano itself'
  task :apply do
    run 'touch puppet.log'
    run "echo 'Running puppet at #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}...' >> puppet.log"
    run "#{sudo} #{custom_facter_variables} puppet apply --debug --verbose --modulepath=#{current_path}/steps/#{step_dir}/modules --parser future --pluginsync #{current_path}/steps/#{step_dir}/manifests/site.pp ; true"
  end

  desc 'Make a symlink to configure the hiera settings from hiera project directory'
  task :config_hiera do
    remote_hiera_path = "/etc/puppet/hiera.yaml"
    local_hiera_path = "#{current_path}/steps/#{step_dir}/hiera/hiera.yaml"
    puts 'Creating the symlink to hiera.yaml!'
    run "#{sudo} ln -fs #{local_hiera_path} #{remote_hiera_path}"
  end
end